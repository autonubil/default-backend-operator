image: gitlab.autonubil.net:5000/shared/magarac:latest

cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
        - gocache
        - .sonar/cache
        - bin/

stages:
    - validate
    - build
    - assemble
    - release

variables:
    DOCKER_TEST_IMAGE: $CI_REGISTRY/$CI_PROJECT_PATH:$CI_COMMIT_REF_NAME
    DOCKER_RELEASE_IMAGE: $CI_REGISTRY/$CI_PROJECT_PATH:latest
    REPO: github.com/autonubil/default-backend-operator
    DOCKER_TAGGED_IMAGE: $CI_REGISTRY/$CI_PROJECT_PATH:$CI_COMMIT_REF_NAME
    DOCKER_PUBLIC_IMAGE: $PUBLIC_REGISTRY/$CI_PROJECT_NAME:$CI_COMMIT_REF_NAME

sonar:
    stage: validate
    script:
        - mkdir -p /root/.sonar/cache
        - sonar-scanner -Dsonar.projectKey=$CI_PROJECT_NAME -Dsonar.sources=. -Dsonar.login=$SONAR_TOKEN -Duser.home=/root/
        - ls -al /root/.sonar/

build:
    stage: build
    script: |
        export ROOT=$(pwd)
        mkdir -p $GOPATH/src/$REPO
        mkdir -p bin/
        mkdir -p /root/gocache
        ls -alh
        mv * $GOPATH/src/$REPO/
        cd $GOPATH/src/$REPO/
        echo CGO_ENABLED=0 GOOS=linux go build -ldflags "-X main.Version=$CI_COMMIT_REF_NAME -X main.BuildDate=$(date --iso-8601=seconds) -X main.Commit=$CI_COMMIT_SHA -s" -a -installsuffix cgo  -v -o $ROOT/bin/default-backend-operator main.go
        GOCACHE=/root/gocache CGO_ENABLED=0 GOOS=linux go build -ldflags "-X main.Version=$CI_COMMIT_REF_NAME -X main.BuildDate=$(date --iso-8601=seconds) -X main.Commit=$CI_COMMIT_SHA -s" -a -installsuffix cgo  -v -o $ROOT/bin/default-backend-operator ./main.go
        ls -alh $ROOT/

# ls $dROOT/ -a -R | grep ":$" | sed -e 's/:$//' -e 's/[^-][^\/]*\//--/g' -e 's/^/   /' -e 's/-/|/'

assemble:
    stage: assemble
    script:
        - export ROOT=$(pwd)
        - cp $ROOT/bin/default-backend-operator ./
        - cp -r $ROOT/configs/static ./
        - docker version
        - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
        - docker build --pull -t "${DOCKER_TEST_IMAGE}" -f Dockerfile.gitlab-ci .
        - docker push "${DOCKER_TEST_IMAGE}"

release-image:
    stage: release
    script:
        - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
        - docker pull "${DOCKER_TEST_IMAGE}"
        - docker tag "${DOCKER_TEST_IMAGE}" "${DOCKER_RELEASE_IMAGE}"
        - docker push "${DOCKER_RELEASE_IMAGE}"
    only:
        - master

publish-image:
    stage: release
    script:
        - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
        - docker pull "${DOCKER_TEST_IMAGE}"
        - docker tag "${DOCKER_TEST_IMAGE}" "${DOCKER_TAGGED_IMAGE}"
        - docker push "${DOCKER_TAGGED_IMAGE}"
        - docker login -u $PUBLIC_REGISTRY_USER -p $PUBLIC_REGISTRY_TOKEN $PUBLIC_REGISTRY
        - docker tag "${DOCKER_TEST_IMAGE}" "${DOCKER_PUBLIC_IMAGE}"
        - docker push "${DOCKER_PUBLIC_IMAGE}"
    only:
        - tags
